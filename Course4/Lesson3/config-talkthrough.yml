version: 2.1

commands:
  destroy-environment:
    desciption: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
      evet:
        type: string
    steps:
      - run:
          name: Destroy environment << parameters.workflow_id >>
          when: << parameters.event >>
          command: |
            echo "Destroying environment: <<parameters.workflow_id >>"
            aws s3 rm s3://udapeople-<<parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id >>

jobs:
  lint-frontend:
    environment:
      CODE: 123
    docker:
      - image: circleci/node:13.8.0
    steps:
     - checkout
     - restore_cache:
        keys: [frontend-build]
     - run:
        name: Lint frontend
        command: |
          cd frontend
          echo $CODE
          npm install
          npm run build
     - save_cache:
        paths: [frontend/node_modules]
        key: frontend-build
    
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
     - checkout
     - restore_cache:
        keys: [backend-build]
     - run:
        name: Backend Build
        command: |
          cd backend
          npm install
          npm run build
     - save_cache:
        paths: [backend/node_modules]
        key: backend-build
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
     - checkout
     - restore_cache:
        keys: [frontend-build]
     - run:
        name: Run frontend test
        command: |
          cd frontend
          npm install
          npm run build

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
     - checkout
     - restore_cache:
        keys: [backend-build]
     - run:
        name: Run backend test
        command: |
          cd backend
          npm install
          npm run build

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
     - checkout
     - restore_cache:
        keys: [frontend-build]
     - run:
        name: Scan frontend dependencies
        command: |
          cd frontend
          npm install
          npm run build --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
     - checkout
     - restore_cache:
        keys: [backend-build]
     - run:
        name: Scan backend dependencies
        command: |
          cd backend
          npm install
          npm run build --audit-level=critical || true
  
  deploy-infrastructure:
    docker:
      image: amazon/aws-cli
    branches:
      only:
        - master
        - /rc-.*/
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure backend infrastructure exists
          command: | 
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      - run:
          name: Ensure frontend infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople           
      - run:
          name: Add backend ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddresses' \
            --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          evet: on_fail
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:




workflows: